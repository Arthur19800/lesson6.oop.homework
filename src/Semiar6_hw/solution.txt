
Для проверки соответствия Java класса принципам SOLID можно использовать следующий алгоритм действий:

1. Принцип единственной ответственности (Single Responsibility Principle):
   - Определить, какие задачи и ответственности несет класс.
   - Проверить, что класс отвечает только за одну задачу или аспект функциональности.
   - Если класс выполняет несколько различных задач, разделить его на отдельные классы, каждый из которых отвечает только за одну задачу.

2. Принцип открытости/закрытости (Open/Closed Principle):
   - Определить, насколько класс открыт для расширения новыми функциями.
   - Проверить, что класс можно расширить без изменения его исходного кода.
   - Если класс не соответствует этому принципу, применить паттерны проектирования, такие как стратегия или адаптер, чтобы обеспечить его расширяемость.

3. Принцип подстановки Барбары Лисков (Liskov Substitution Principle):
   - Убедиться, что классы, производные от базового класса, могут быть использованы вместо него без нарушения корректности программы.
   - Проверить, что классы-наследники не изменяют поведение базового класса, а только расширяют или переопределяют его функциональность.

4. Принцип разделения интерфейса (Interface Segregation Principle):
   - Убедиться, что интерфейсы, реализуемые классом, являются независимыми и содержат только необходимые методы.
   - Проверить, что класс не зависит от методов, которые он не использует.
   - Если класс реализует "толстый" интерфейс, разделить его на несколько более узких интерфейсов.

5. Принцип инверсии зависимостей (Dependency Inversion Principle):
   - Проверить, что класс зависит от абстракций, а не от конкретных реализаций.
   - Убедиться, что класс не создает экземпляры зависимых объектов напрямую, а получает их через внедрение зависимости (dependency injection).
   - Использовать интерфейсы или абстрактные классы для определения зависимостей класса.



Для проверки  есть два класса с 4 семинара: User и UserComparator.
Проверка по алгоритму класс User.
1. SRP:
Класс User только одну задачу: хранит минимальные атрибуты пользователя - ФИО.
Данный класс отвечает только за хранение ФИО, поэтому данный класс соответствует приципу единственной ответственности.
2. OCP:
класс User  раширяется без изменения его исходного кода, при реализации класса Teacher.
Данный класс можно расширить без изменения его исходного кода, поэтому данный класс соответствует приципу открытости/закрытости.
3. LSP:
производные от User классы Teacher и Student имеют ФИО и могут быть использованы вместо него без нарушения корректности программы и
не изменяют поведение класса User.
Поэтому,  данный класс соответствует приципу подстановки Барбары Лисков.
4. ISP:
Класс User содержат только необходимые методы, которые используются для реализации хранения актуальной информации о ФИО пользователя.
Поэтому,  данный класс соответствует приципу разделения интерфейса.
5. DIP:
Класс User не зависит ни от одного класса
Поэтому,  данный класс соответствует приципу инверсии зависимостей.
Таким образом, класс User  соответствует принципам SOLID.

Проверка по алгоритму класс UserComparator.
1. Класс UserComparator реализует интерфейс Comparator для класса User и его наследников и решает одну задачу: сравнение двух экземпляров по ФИО.
Данный класс соответствует приципу единственной ответственности.
2. Сложный вопрос  как можно расширить этот  класс, т.к. для сравнения по другим
 критериям нужно реализовать независимый от этого класса Comparator. А сравнение по фио реализовано полностью.
Данный класс соответствует приципу открытости/закрытости.
3. производные классы не планируюся в принципе для компараторов.
Данный класс соответствует приципу подстановки Барбары Лисков.
4. класс содержит единственный метод реализующий интерфейс Comparator полностью выполняющий функцию сравнения двух объектов по ФИО.
Данный класс соответствует приципу разделения интерфейса.
5. класс не имеет зависимостей от других классов. Он зависит только от наличия полей ФИО и возможности получения их значений
 в сравниваемых объектах.
Данный класс соответствует приципу инверсии зависимостей.
Таким образом, класс UserComparator полность соответствует принципам SOLID.